--Installation--

1: Install p4factory (https://github.com/p4lang/p4factory)
2: ~/p4factory/tools/newtarget.py hobfs
3: Copy files and folders in this directory into ~/p4factory/targets/hobfs/
   Copy ./demo_1/header_obfs_demo_*.py into ~/p4factory/mininet/
4: cd ~/p4factory/targets/hobfs
5: make bm

--Demo 1--

-Requirements
 ~/p4factory/targets/hobfs/:
  run_demo_1.bash
  run_cli.bash
  start_ops
  broken_ops
  repair_ops
  capture.sh
 ~/p4factory/mininet/:
  header_obfs_demo_1.py

-Overview-

This demo starts mininet with a single switch running our header obfuscation
program.  The switch is configured for normal operations, and packets can
flow, as tested with pings.  The switch is changed to start shuffling the
fields in the ethernet header according to a predetermined permutation.
Packets cannot flow.  The switch is changed back, and packets can flow once
again.  This demo involves starting tcpdump on each of the switch's two
interfaces, allowing .pcaps to be compared so we can see the header
obfuscation taking effect.

terminal 1: 	cd ~/p4factory/targets/hobfs/
		./run_demo_1.bash
		h1 ping h2 -c 1 -W 1		(observe no reachability)
terminal 2: 	cd ~/p4factory/targets/hobfs/
		./run_cli.bash 1 < start_ops
	t1:	h1 ping h2 -c 1 -W 1		(observe reachability)
		xterm s1
  xterm s1:	./capture.sh s1 <run #>		(start tcpdump on both ifaces)
	t1:	h1 ping h2 -c 1 -W 1
	t2:	./run_cli.bash 1 < broken_ops
	t1:	h1 ping h2 -c 1 -W 1		(observe no reachability)
	t2:	./run_cli.bash 1 < repair_ops
	t1:	h1 ping h2 -c 1 -W 1		(observe reachability)
  xterm s1:	<enter>
		pkill -TERM tcpdump
		<enter>
	t1:	exit

Open Wireshark, compare .pcaps generated for each iface, observe that the .pcap
for s1-eth2 includes some badly mangled packets, some of which correspond to
the pings sent from h1 to h2, while others are mangled discovery packets sent by
other processes not in the scope of this demo.

--Demo 2--

-Requirements-
 ~/p4factory/targets/hobfs/:
  run_demo_2.bash
  run_cli.bash
  start_ops
  gosecure_s1
  gosecure_s2
  gounsecure
  capture.sh
 ~/p4factory/mininet/:
  header_obfs_demo_2.py


-Overview-

This demo starts mininet with two switches in between h1 and h2, with each
switch running our header obfuscation program.  Switches are configured for
normal operations, and packets can flow, as tested with pings.  S1 is
configured to start shuffling the fields in the ethernet header according
to a predetermined permutation.  Packets cannot flow.  S2 is configured to
reverse the shuffling carried out by s1.  Packets can flow once again.
But anyone listening in on communications between s1 and s2 will see a lot
of garbled traffic.  This demo inolves starting tcpdump on each of the two
switches' two interfaces, allowing .pcaps to be compared so we can see the
header obfuscation taking effect.

terminal 1:	cd ~/p4factory/targets/hobfs
		./run_demo_2.bash
		h1 ping h2 -c 1 -W 1		(observe no reachability)
terminal 2:	cd ~/p4factory/targets/hobfs
		./run_cli.py 1 < start_ops
		./run_cli.py 2 < start_ops
	t1:	h1 ping h2 -c 1 -W 1		(observe reachability)
		xterm s1
  xterm s1:	./capture.sh s1 <run #>		(start tcpdump on both ifaces)
	t1:	xterm s2
  xterm s2:	./capture.sh s2 <run #>		(start tcpdump on both ifaces)
	t1:	h1 ping h2 -c 1 -W 1		(observe reachability)
	t2:	./run_cli.py 1 < gosecure_s1
	t1:	h1 ping h2 -c 1 -W 1		(observe no reachability)
	t2:	./run_cli.py 2 < gosecure_s2
	t1:	h1 ping h2 -c 1 -W 1		(observe reachability)
  xterm s1:	<enter>
		pkill -TERM tcpdump
		<enter>
	t1:	exit

Open Wireshark, compare .pcaps, observe the period of time when s1 and s2
are communicating in 'secure' mode.  Traffic on s1-eth2 and s2-eth2 is
mangled during this interval, though traffic sent (s1-eth1) and received
(s2-eth1) looks normal.
