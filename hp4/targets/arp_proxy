## COMMANDS

mirroring_add 1 1
mirroring_add 2 2
mirroring_add 3 3

### setup.p4

# ports 1 and 2 handled by program 1:
# t_prog_select set_program [ingress_port] => [program ID]
table_add t_prog_select set_program 1 => 1
table_add t_prog_select set_program 2 => 1

# if first time through, set next_action = INSPECT_SEB
# parse_control set_next_action [program ID] [numbytes] [state] => [next_action]
table_add parse_control set_next_action 1 0 0 => 1 #INSPECT_SEB
table_add parse_control set_next_action 1 42 1 => 0 #PROCEED

# t_inspect_SEB extract_more [program ID] [ext[0].data&&&mask] ... [ext[19].data&&&mask] => [numbytes] [state] [match priority]
table_add t_inspect_SEB extract_more 1 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0x08&&&0xFF 0x06&&&0xFF 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 => 42 1 1
table_set_default t_inspect_SEB set_next_action 0 #PROCEED
table_set_default t_norm_SEB a_norm_SEB
table_set_default t_norm_20_39 a_norm_20_39
table_set_default t_norm_40_59 a_norm_40_59

# t_set_first_table a_set_first_table [program ID] [state] => [tableID]
table_add t_set_first_table a_set_first_table 1 1 => 3 #STDMETA_EXACT

# t_set_validbits a_set_validbits [program ID] [state] => [val]
table_add t_set_validbits a_set_validbits 1 1 => 0xC0000000000000000000 # first two bits turned on, representing ethernet and arp headers
table_add t_set_validbits a_set_validbits 1 0 => 0x80000000000000000000 # only first bit turned on, representing the ethernet header

### table init_meta_egress

## stages.p4: stage1()

## match.p4
# field to examine is ingress_port
# t1_stdmeta_exact set_meta_stdmeta [program ID] => [stdmeta_ID]
table_add t1_stdmeta_exact set_meta_stdmeta 1 => 1 # STDMETA_INGRESS_PORT

## switch_stdmeta.p4
# set next_table to EXTRACTED_VALID
# t1_stdmeta_ingress_port init_program_state [program ID] [ingress_port] => [action_ID] [match_ID] [next_table]
table_add t1_stdmeta_ingress_port init_program_state 1 1 => 1 1 4 # EXTRACTED_VALID
table_add t1_stdmeta_ingress_port init_program_state 1 2 => 1 2 4 # EXTRACTED_VALID

############# action a_init_meta_egress: modify_field(meta.egress, port)

## stages.p4: stage1()

## action.p4
# primitive type: modify_field
# primitive subtype: meta_const (dest = meta, src = const)
# set_primitive_metadata_11 [program ID] [action_ID] [primitive_index] => [primitive type] [primitive subtype] 
table_add set_primitive_metadata_11 a_set_primitive_metadata 1 1 1 => 0 8 # MODIFY_FIELD, meta_const

## switch_primitivetype.p4

## modify_field.p4
# t_mod_prep_11 _no_op [program ID] [action ID] [primitive_index] =>
table_add t_mod_prep_11 _no_op 1 1 1 =>
# t_mod_11 mod_meta_const [program ID] [primitive subtype] [match ID] => [val], [leftshift], [tmeta_mask]
table_add t_mod_11 mod_meta_const 1 8 1 => 2 32 0xFF00000000
table_add t_mod_11 mod_meta_const 1 8 2 => 1 32 0xFF00000000

### end primitive modify_field(meta.egress, port)

## stages.p4: stage1()

# mark action as complete
# set_program_state_11 set_program_state [program ID] [action ID] [primitive index] => [action ID] [primitive index] [stage state] [next stage]
table_add set_program_state_11 set_program_state 1 1 1 => 0 0 1 2 # stage complete, continue to stage 2

############# end action a_init_meta_egress

### table check_arp

## stages.p4: stage2(): match_2();

## match.p4: match_2()
# t2_extracted_valid init_program_state [program ID] [validbits&&&mask] => [action_ID] [match ID] [next table]
table_add t2_extracted_valid init_program_state 1 0xC0000000000000000000&&&0xC0000000000000000000 => 2 1 1 # arp_present, ..., EXTRACTED_EXACT
table_add t2_extracted_valid init_program_state 1 0x80000000000000000000&&&0xC0000000000000000000 => 5 2 0 # send_packet, ..., DONE

############# action arp_present: [no_op]
############# action send_packet: modify_field(standard_metadata.egress_spec, meta.egress);

## stages.p4: stage2(): apply(set_primitive_metadata_21);

## action.p4
# set_primitive_metadata_21 a_set_primitive_metadata [program ID] [action ID] [primitive index] => [primitive type], [primitive subtype]
table_add set_primitive_metadata_21 a_set_primitive_metadata 1 2 1 => 7 0 # no_op
table_add set_primitive_metadata_21 a_set_primitive_metadata 1 5 1 => 0 7 # modify_field, stdmeta_egressspec_meta

## switch_primitivetype.p4

## modify_field.p4
# t_mod_prep_21 a_mod_prep [program ID] [action ID] [primitive index] => [leftshift] [rightshift]
table_add t_mod_prep_21 a_mod_prep 1 5 1 => 0 32
# t_mod_21 mod_stdmeta_egressspec_meta [program ID] [primitive subtype] [match ID] => 
table_add t_mod_21 mod_stdmeta_egressspec_meta 1 7 2 =>

## stages.p4: stage2()
# set_program_state_21 set_program_state [program ID] [action ID] [primitive index] => [action ID] [primitive index] [stage state] [next stage]
table_add set_program_state_21 set_program_state 1 2 1 => 0 0 1 3 # stage complete, continue to stage 3
table_add set_program_state_21 set_program_state 1 5 1 => 0 0 1 0 # stage complete, pipeline complete

############# end action arp_present
############# end action send_packet

### table check_opcode

## stages.p4: stage3(): match_3();

## match.p4: match_3()
# t3_extracted_exact init_program_state [program ID] [extracted.data&&&mask] => [action ID] [match ID] [next table] [match priority]
table_add t3_extracted_exact init_program_state 1 0x010000000000000000000000000000000000000000&&&0xFF0000000000000000000000000000000000000000 => 3 1 1 1 #arp_request, ..., EXTRACTED_EXACT, priority 1
table_add t3_extracted_exact init_program_state 1 0x00&&&0x00 => 5 2 0 2 # send_packet, ..., DONE, priority 2

############# action arp_request: [no_op]
############# action send_packet: modify_field(standard_metadata.egress_spec, meta.egress);

## stages.p4: stage3(): apply(set_primitive_metadata_31);

## action.p4
# set_primitive_metadata_31 a_set_primitive_metadata [program ID] [action ID] [primitive index] => [primitive type], [primitive subtype]
table_add set_primitive_metadata_31 a_set_primitive_metadata 1 3 1 => 7 0 # no_op
table_add set_primitive_metadata_31 a_set_primitive_metadata 1 5 1 => 0 7 # modify_field, stdmeta_egressspec_meta

## switch_primitivetype.p4

## modify_field.p4
# t_mod_prep_31 a_mod_prep [program ID] [action ID] [primitive index] =>
table_add t_mod_prep_31 a_mod_prep 1 5 1 => 0 32
# t_mod_21 mod_stdmeta_egressspec_meta [program ID] [primitive subtype] [match ID] =>
table_add t_mod_31 mod_stdmeta_egressspec_meta 1 7 2 =>

## stages.p4: stage3()
# set_program_state_31 set_program_state [program ID] [action ID] [primitive index] => [action ID] [primitive index] [stage state] [next stage]
table_add set_program_state_31 set_program_state 1 3 1 => 0 0 1 4 # stage complete, continue to stage 4
table_add set_program_state_31 set_program_state 1 5 1 => 0 0 1 0 # stage complete, pipeline complete

############# end action arp_request
############# end action send_packet

## table handle_arp_request

## stages.p4: stage4() match_4();

## match.p4: match_4()
# t4_extracted_exact init_program_state [program ID] [extracted.data&&&mask] => [action ID] [match ID] [next table] [match priority]
table_add t4_extracted_exact init_program_state 1 0x0a000002&&&0xFFFFFFFF => 4 1 0 1 # arp_reply, ..., DONE, priority 1
table_add t4_extracted_exact init_program_state 1 0x0a000001&&&0xFFFFFFFF => 4 2 0 1 # arp_reply, ..., DONE, priority 1
table_add t4_extracted_exact init_program_state 1 0x00&&&0x00 => 5 3 0 2 # send_packet, ..., DONE, priority 2

############# action arp_reply: modify_field(standard_metadata.egress_spec, standard_metadata.ingress_port)
############# action send_packet: modify_field(standard_metadata.egress_spec, meta.egress)

## stages.p4: stage4() apply(set_primitive_metadata_41);

## action.p4
# set_primitive_metadata_41 a_set_primitive_metadata [program ID] [action ID] [primitive index] => [primitive type], [primitive subtype]
table_add set_primitive_metadata_41 a_set_primitive_metadata 1 4 1 => 0 11 # modify_field, stdmeta_egressspec_stdmeta_ingressport
table_add set_primitive_metadata_41 a_set_primitive_metadata 1 5 1 => 0 7 # modify_field, stdmeta_egressspec_meta

## switch_primitivetype.p4

## modify_field.p4
# t_mod_prep_41 _no_op [program ID] [action ID] [primitive index] =>
table_add t_mod_prep_41 _no_op 1 4 1 =>
table_add t_mod_prep_41 mod_stdmeta_egressspec_meta 1 5 1 => 0 32
# t_mod_41 mod_stdmeta_egressspec_stdmeta_ingressport [program ID] [primitive subtype] [match ID] =>
table_add t_mod_41 mod_stdmeta_egressspec_stdmeta_ingressport 1 11 1 =>
table_add t_mod_41 mod_stdmeta_egressspec_stdmeta_ingressport 1 11 2 =>
# t_mod_41 mod_stdmeta_egressspec_meta [program ID] [primitive subtype] [match ID] =>
table_add t_mod_41 mod_stdmeta_egressspec_meta 1 7 3 =>

## stages.p4: stage4()
# set_program_state_41 set_program_state [program ID] [action ID] [primitive index] => [action ID] [primitive index] [stage stage] [next stage]
table_add set_program_state_41 set_program_state 1 4 1 => 4 2 2 0 # continue to second primitive in arp_reply
table_add set_program_state_41 set_program_state 1 5 1 => 0 0 1 0 # stage complete, pipeline complete


