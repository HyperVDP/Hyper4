P4 IMPORTANT INSIGHTS, COMMANDS, ETC.

----- Installing p4factory -----
cd ~
git clone https://github.com/p4lang/p4factory
cd p4factory
git submodule update --init --recursive
[./install_deps.sh]
[sudo p4factory/tools/veth_setup.sh]
./autogen.sh
./configure

cd submodules/bm
./autogen.sh
./configure
make

IF WE WANT TO BE BLEEDING EDGE ON A SUBMODULE:
cd <submodule dir>
git checkout master
git pull

Necessary because sometimes changes are made in submodules that are reflected in commits beyond what p4factory is tracking.

----- problems running behavioral model? -----
I think this applies to bmv1, but try:
 redis-cli FLUSHALL
 sudo killall behavioral-model <-- may not be necessary and/or work
 sudo mn -c
http://mail.p4.org/pipermail/p4-dev_p4.org/2015-August/000120.html

----- architectural insights
I believe this mainly applies to bmv1: http://mail.p4.org/pipermail/p4-dev_p4.org/2015-September/000181.html

----- consuming notifications (e.g. for learning addresses etc.)
http://mail.p4.org/pipermail/p4-dev_p4.org/2015-September/000184.html

----- terminology
"matchless tables" - http://mail.p4.org/pipermail/p4-dev_p4.org/2015-August/000119.html

----- Working with bmv2 lessons learned -----
Using meters:
http://mail.p4.org/pipermail/p4-dev_p4.org/2015-October/000249.html

bmv2 was announced 10 Sep.  I believe the notes below re: register support still apply even though the referenced messages were written before the bmv2 release.

Using registers:
http://mail.p4.org/pipermail/p4-dev_p4.org/2015-August/000098.html
http://mail.p4.org/pipermail/p4-dev_p4.org/2015-August/000131.html

But then we have this:
http://mail.p4.org/pipermail/p4-dev_p4.org/2015-October/000240.html ???

Registers may not be fully supported, per a 5 Aug thread on p4-dev.  See http://mail.p4.org/pipermail/p4-dev_p4.org/2015-August/000098.html.  It is not clear whether the observations regarding register support in this thread are referring to bmv2 as well as bmv1, but I suspect it does apply to bmv2.  Despite what the language spec says, we cannot use modify_field in bmv2 but rather must use register_read() and register_write(); see ~/p4-hlir/p4_hlir/frontend/primitives.json starting at line 61 (see also https://github.com/p4lang/p4-hlir/blob/master/p4_hlir/frontend/primitives.json#L61).

It is clear that Antonin advocates using:

  ~/p4factory/submodules/bm/targets/simple_switch/simple_switch

as the binary for the soft switch no matter the p4 program.  See http://mail.p4.org/pipermail/p4-dev_p4.org/2015-November/000275.html:

  "The bmv2 repository
comes with 3 targets: simple_switch, simple_router, l2_switch. I encourage
you to ignore l2_switch and simple_router. They were just meant as examples
and will probably be removed from the repository soon. simple_switch will
be the default switch target for p4lang and defines the switch model
described in the original P4 spec: ingress parser -> ingress pipeline -> ?
(undefined queuing block) -> egress pipeline -> egress parser."

BUT simple_switch does not currently support the ability to swap config files at runtime.  Antonin Bas does have a solution but has not committed it to the main branch as he is uncertain whether it is the best way to go.  See http://mail.p4.org/pipermail/p4-dev_p4.org/2015-November/000300.html:

  "Config swapping is disabled for the simple_switch target, so this is
expected. I tentatively pushed a commit to the behavioral-model repo which
enables it, but I did not merged it into master because I am not sure yet
it is the best way to do it. You will find the commit in a separate branch,
here: https://github.com/p4lang/behavioral-model/tree/simple-switch-swap."

In any case, bmv2 is faster for development, because producing the JSON file via p4c-bmv2 is much faster than recompiling e.g. bmv1 with the target p4 program.

Mininet example:

terminal 1:
  p4c-bmv2 --json <desired JSON filename> <p4 source>

  sudo ~/p4factory/submodules/bm/mininet/1sw_demo.py --behavioral-exe ~/p4factory/submodules/bm/targets/simple_switch/simple_switch --json <JSON path>

terminal 2:
  ~/p4factory/submodules/bm/tools/runtime_CLI.py --json <JSON path> [< file_with_CLI_commands]

Look at ptf.testutils for functions for testing by constructing, sending, and verifying packets.  It is not clear yet whether we can use these with bmv2.  testutils.py in:
  ~/p4factory/submodules/ptf/src/ptf
Example of use in:
  ~/p4factory/targets/basic_routing/tests/ptf-tests/routing.py
